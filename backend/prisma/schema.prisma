// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Force Docker rebuild: 2025-07-14T16:30:00Z

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String?  @map("password_hash") // Optional for OAuth users
  googleId        String?  @unique @map("google_id") // Google OAuth ID
  firstName       String?  @map("first_name")
  lastName        String?  @map("last_name")
  profilePicture  String?  @map("profile_picture") // OAuth profile picture URL
  authProvider    String   @default("local") @map("auth_provider") // "local", "google"
  subscriptionTier String  @default("free") @map("subscription_tier") // "free", "premium", "enterprise"
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  prompts         Prompt[]
  promptShares    PromptShare[]
  teamMemberships TeamMember[]
  apiTokens       ApiToken[]

  @@map("users")
}

model Prompt {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  tags        Json     @default("[]")
  isPublic    Boolean  @default(false) @map("is_public")
  category    String?
  version     Int      @default(1)
  parentId    String?  @map("parent_id") // For versioning
  userId      String   @map("user_id")
  variables   Json     @default("[]") // Array of {name, description} for prompt variables
  metadata    Json     @default("{}") // Additional metadata for advanced editor features
  templateId  String?  @map("template_id") // Reference to built-in or custom template
  wordCount   Int?     @map("word_count") // Cached word count
  charCount   Int?     @map("char_count") // Cached character count
  estimatedTokens Int? @map("estimated_tokens") // Cached token estimation
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Prompt?        @relation("PromptVersions", fields: [parentId], references: [id])
  versions     Prompt[]       @relation("PromptVersions")
  shares       PromptShare[]
  analytics    PromptAnalytics[]

  @@map("prompts")
}

model PromptShare {
  id               String   @id @default(cuid())
  promptId         String   @map("prompt_id")
  sharedWithUserId String   @map("shared_with_user_id")
  permissionLevel  String   @default("read") // "read", "write", "admin"
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  prompt       Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  sharedWithUser User @relation(fields: [sharedWithUserId], references: [id], onDelete: Cascade)

  @@unique([promptId, sharedWithUserId])
  @@map("prompt_shares")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  teamId String @map("team_id")
  userId String @map("user_id")
  role   String @default("member") // "owner", "admin", "member"
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model PromptAnalytics {
  id        String   @id @default(cuid())
  promptId  String   @map("prompt_id")
  eventType String   @map("event_type") // "view", "use", "copy", "edit"
  metadata  Json     @default("{}")
  timestamp DateTime @default(now())

  // Relations
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@map("prompt_analytics")
}

model ApiToken {
  id          String   @id @default(cuid())
  name        String   // User-friendly name for the token
  token       String   @unique // The actual token (hashed)
  userId      String   @map("user_id")
  permissions Json     @default("[]") // Array of permissions ["read", "write", "admin"]
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at") // Optional expiration
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_tokens")
}