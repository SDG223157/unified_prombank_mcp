name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Setup test environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "JWT_SECRET=test-jwt-secret-for-testing-only" >> .env

    - name: Generate Prisma client
      working-directory: ./backend
      run: npx prisma generate

    - name: Run database migrations
      working-directory: ./backend
      run: npx prisma migrate dev --name init

    - name: Run backend tests
      working-directory: ./backend
      run: npm test

  test-mcp-server:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json

    - name: Install MCP server dependencies
      working-directory: ./mcp-server
      run: npm ci

    - name: Build MCP server
      working-directory: ./mcp-server
      run: npm run build

    - name: Run MCP server tests
      working-directory: ./mcp-server
      run: npm test

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test-backend, test-mcp-server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: prompthouse-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build MCP server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-server
        file: ./mcp-server/Dockerfile
        push: false
        tags: prompthouse-mcp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        echo "DATABASE_URL=postgresql://test:test@db:5432/test" > .env.test
        echo "JWT_SECRET=test-jwt-secret-for-testing" >> .env.test
        echo "ALLOWED_ORIGINS=http://localhost:3000" >> .env.test
        docker-compose -f docker-compose.prod.yml config

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'