# Multi-stage build for unified Backend + Frontend + MCP Server deployment
FROM node:18-slim AS base

# Install dependencies only when needed
FROM base AS deps
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 make g++ libssl1.1 ca-certificates \
    && rm -rf /var/lib/apt/lists/*
WORKDIR /app

# Copy backend package files and install
COPY backend/package.json backend/package-lock.json ./backend/
RUN cd backend && npm ci

# Copy frontend package files and install
COPY frontend/package.json frontend/package-lock.json ./frontend/
RUN cd frontend && npm ci

# Copy mcp-server package files and install
COPY mcp-server/package.json mcp-server/package-lock.json ./mcp-server/
RUN cd mcp-server && npm ci

# Copy root package.json (for workspace info, but don't install)
COPY package.json ./

# Build stage
FROM base AS builder
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 make g++ libssl1.1 ca-certificates \
    && rm -rf /var/lib/apt/lists/*
WORKDIR /app

# Copy configuration files from frontend directory
COPY frontend/next.config.js frontend/postcss.config.js frontend/tailwind.config.js frontend/tsconfig.json frontend/next-env.d.ts ./frontend/
COPY mcp-server/tsconfig.json ./mcp-server/

# Copy source code
COPY backend/src ./backend/src
COPY backend/prisma ./backend/prisma
COPY backend/package.json ./backend/
COPY frontend/src ./frontend/src
COPY frontend/public ./frontend/public
COPY frontend/package.json ./frontend/
COPY mcp-server/src ./mcp-server/src
COPY mcp-server/package.json ./mcp-server/

# Copy dependencies (only the ones that exist)
COPY --from=deps /app/backend/node_modules ./backend/node_modules
COPY --from=deps /app/frontend/node_modules ./frontend/node_modules
COPY --from=deps /app/mcp-server/node_modules ./mcp-server/node_modules

# Generate Prisma client for correct platform AFTER copying node_modules
WORKDIR /app/backend
# Clear any cached Prisma client and force regeneration for Debian
RUN rm -rf node_modules/.prisma node_modules/@prisma/client/libquery_engine-* || true
ENV PRISMA_CLI_BINARY_TARGETS=linux-gnu-openssl-1.1.x
ENV PRISMA_QUERY_ENGINE_LIBRARY=/tmp/libquery_engine-linux-gnu-openssl-1.1.x.so.node
RUN npx prisma generate --force-generate \
    && ls -la node_modules/.prisma/client/ \
    && echo "Generated Prisma client for platform: $(ls node_modules/.prisma/client/libquery_engine-*.so.node)"

# Build frontend
WORKDIR /app/frontend
ENV NEXT_PUBLIC_API_URL=https://prombank.app/api
RUN npm run build

# Build MCP server
WORKDIR /app/mcp-server
RUN npm run build

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Install runtime dependencies for Debian
RUN apt-get update && apt-get install -y --no-install-recommends \
    dumb-init mysql-client netcat-traditional libssl1.1 ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd --system --gid 1001 nodejs
RUN useradd --system --uid 1001 --gid nodejs --shell /bin/bash --home /app nextjs

# Copy backend source and dependencies
COPY --from=builder --chown=nextjs:nodejs /app/backend/src ./backend/src
COPY --from=builder --chown=nextjs:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=builder --chown=nextjs:nodejs /app/backend/prisma ./backend/prisma
COPY --from=builder --chown=nextjs:nodejs /app/backend/package.json ./backend/

# Copy built frontend
COPY --from=builder --chown=nextjs:nodejs /app/frontend/.next ./frontend/.next
COPY --from=builder --chown=nextjs:nodejs /app/frontend/public ./frontend/public
COPY --from=builder --chown=nextjs:nodejs /app/frontend/package.json ./frontend/
COPY --from=builder --chown=nextjs:nodejs /app/frontend/node_modules ./frontend/node_modules

# Copy built MCP server
COPY --from=builder --chown=nextjs:nodejs /app/mcp-server/dist ./mcp-server/dist
COPY --from=builder --chown=nextjs:nodejs /app/mcp-server/node_modules ./mcp-server/node_modules
COPY --from=builder --chown=nextjs:nodejs /app/mcp-server/package.json ./mcp-server/

# Copy root package.json and startup script
COPY --chown=nextjs:nodejs package.json ./package.json
COPY --chown=nextjs:nodejs startup.sh ./startup.sh
RUN chmod +x ./startup.sh

# Set proper permissions
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Use startup script to run all services
CMD ["dumb-init", "./startup.sh"]
